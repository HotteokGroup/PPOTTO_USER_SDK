/* tslint:disable */
/* eslint-disable */
/**
 * PPOTTO User API
 * 뽀또 유저서비스
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AgreeTermsOfServiceRequest
 */
export interface AgreeTermsOfServiceRequest {
    /**
     * 회원 아이디
     * @type {number}
     * @memberof AgreeTermsOfServiceRequest
     */
    'userId': number;
    /**
     * 동의할 약관 아이디
     * @type {Array<number>}
     * @memberof AgreeTermsOfServiceRequest
     */
    'termsOfServiceIds': Array<number>;
}
/**
 * 
 * @export
 * @interface ConfirmVerificationRequest
 */
export interface ConfirmVerificationRequest {
    /**
     * 인증 요청 아이디
     * @type {string}
     * @memberof ConfirmVerificationRequest
     */
    'id': string;
    /**
     * 인증 코드
     * @type {string}
     * @memberof ConfirmVerificationRequest
     */
    'verificationCode': string;
}
/**
 * 
 * @export
 * @interface ConfirmVerificationResponse
 */
export interface ConfirmVerificationResponse {
    /**
     * 인증 요청 결과 아이디
     * @type {string}
     * @memberof ConfirmVerificationResponse
     */
    'id': string;
    /**
     * 인증 결과
     * @type {boolean}
     * @memberof ConfirmVerificationResponse
     */
    'result': boolean;
    /**
     * 남은 인증가능 횟수
     * @type {number}
     * @memberof ConfirmVerificationResponse
     */
    'remaining': number;
    /**
     * 인증 타입
     * @type {string}
     * @memberof ConfirmVerificationResponse
     */
    'verificationType': ConfirmVerificationResponseVerificationTypeEnum;
    /**
     * 이메일 주소 (인증타입이 이메일인경우 필수)
     * @type {string}
     * @memberof ConfirmVerificationResponse
     */
    'emailAddress'?: string;
    /**
     * 요청 유저 아이디 (단순 기록용)
     * @type {number}
     * @memberof ConfirmVerificationResponse
     */
    'userId'?: number;
}

export const ConfirmVerificationResponseVerificationTypeEnum = {
    Email: 'EMAIL'
} as const;

export type ConfirmVerificationResponseVerificationTypeEnum = typeof ConfirmVerificationResponseVerificationTypeEnum[keyof typeof ConfirmVerificationResponseVerificationTypeEnum];

/**
 * 
 * @export
 * @interface CreateFileRequest
 */
export interface CreateFileRequest {
    /**
     * 파일 유형 (프로필 이미지, 피드 이미지)
     * @type {string}
     * @memberof CreateFileRequest
     */
    'contentType': CreateFileRequestContentTypeEnum;
    /**
     * 고객 아이디
     * @type {number}
     * @memberof CreateFileRequest
     */
    'userId': number;
}

export const CreateFileRequestContentTypeEnum = {
    FeedImage: 'FEED_IMAGE',
    ProfileImage: 'PROFILE_IMAGE'
} as const;

export type CreateFileRequestContentTypeEnum = typeof CreateFileRequestContentTypeEnum[keyof typeof CreateFileRequestContentTypeEnum];

/**
 * 
 * @export
 * @interface CreateFileResponse
 */
export interface CreateFileResponse {
    /**
     * 파일 고유 아이디
     * @type {string}
     * @memberof CreateFileResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * 이메일
     * @type {string}
     * @memberof CreateUserRequest
     */
    'email': string;
    /**
     * 닉네임
     * @type {string}
     * @memberof CreateUserRequest
     */
    'nickName': string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof CreateUserRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * 회원 아이디
     * @type {number}
     * @memberof CreateUserResponse
     */
    'id': number;
}
/**
 * 
 * @export
 * @interface GetFileListItem
 */
export interface GetFileListItem {
    /**
     * 파일 고유 아이디
     * @type {string}
     * @memberof GetFileListItem
     */
    'id': string;
    /**
     * 고객 아이디
     * @type {number}
     * @memberof GetFileListItem
     */
    'userId': number;
    /**
     * 파일 유형 (프로필 이미지, 피드 이미지)
     * @type {string}
     * @memberof GetFileListItem
     */
    'contentType': GetFileListItemContentTypeEnum;
    /**
     * 연결된 콘텐츠 아이디
     * @type {string}
     * @memberof GetFileListItem
     */
    'contentId'?: string;
    /**
     * 파일명
     * @type {string}
     * @memberof GetFileListItem
     */
    'fileName'?: string;
    /**
     * 원본 파일 주소
     * @type {string}
     * @memberof GetFileListItem
     */
    'originalFileUrl'?: string;
    /**
     * 작은 섬네일 주소
     * @type {string}
     * @memberof GetFileListItem
     */
    'smallThumbnailUrl'?: string;
    /**
     * 중간 섬네일 주소
     * @type {string}
     * @memberof GetFileListItem
     */
    'mediumThumbnailUrl'?: string;
    /**
     * 큰 섬네일 주소
     * @type {string}
     * @memberof GetFileListItem
     */
    'largeThumbnailUrl'?: string;
    /**
     * 콘텐츠 관계 해제일
     * @type {string}
     * @memberof GetFileListItem
     */
    'disconnectedAt'?: string;
    /**
     * 생성일
     * @type {string}
     * @memberof GetFileListItem
     */
    'createdAt'?: string;
}

export const GetFileListItemContentTypeEnum = {
    FeedImage: 'FEED_IMAGE',
    ProfileImage: 'PROFILE_IMAGE'
} as const;

export type GetFileListItemContentTypeEnum = typeof GetFileListItemContentTypeEnum[keyof typeof GetFileListItemContentTypeEnum];

/**
 * 
 * @export
 * @interface GetFileListResponse
 */
export interface GetFileListResponse {
    /**
     * 
     * @type {Array<GetFileListItem>}
     * @memberof GetFileListResponse
     */
    'list': Array<GetFileListItem>;
}
/**
 * 
 * @export
 * @interface GetTermsOfServiceItem
 */
export interface GetTermsOfServiceItem {
    /**
     * 약관 아이디
     * @type {number}
     * @memberof GetTermsOfServiceItem
     */
    'id': number;
    /**
     * 약관 제목
     * @type {string}
     * @memberof GetTermsOfServiceItem
     */
    'title': string;
    /**
     * 약관 내용
     * @type {string}
     * @memberof GetTermsOfServiceItem
     */
    'content': string;
    /**
     * 필수 여부
     * @type {boolean}
     * @memberof GetTermsOfServiceItem
     */
    'isEssential': boolean;
    /**
     * 생성일
     * @type {string}
     * @memberof GetTermsOfServiceItem
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface GetTermsOfServiceResponse
 */
export interface GetTermsOfServiceResponse {
    /**
     * 
     * @type {Array<GetTermsOfServiceItem>}
     * @memberof GetTermsOfServiceResponse
     */
    'list': Array<GetTermsOfServiceItem>;
}
/**
 * 
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetUserResponse
     */
    'id': number;
    /**
     * 유저 이메일
     * @type {string}
     * @memberof GetUserResponse
     */
    'email': string;
    /**
     * 유저 닉네임
     * @type {string}
     * @memberof GetUserResponse
     */
    'nickName': string;
    /**
     * 유저 프로필 사진
     * @type {string}
     * @memberof GetUserResponse
     */
    'profileImage': string;
    /**
     * 유저 삭제일
     * @type {string}
     * @memberof GetUserResponse
     */
    'deletedAt': string;
    /**
     * 유저 마지막 업데이트일
     * @type {string}
     * @memberof GetUserResponse
     */
    'updatedAt': string;
    /**
     * 유저 생성일
     * @type {string}
     * @memberof GetUserResponse
     */
    'createdAt': string;
    /**
     * 약관동의정보
     * @type {Array<GetUserTermsOfServiceAgreementItem>}
     * @memberof GetUserResponse
     */
    'UserTermsOfServiceAgreement': Array<GetUserTermsOfServiceAgreementItem>;
}
/**
 * 
 * @export
 * @interface GetUserTermsOfServiceAgreementItem
 */
export interface GetUserTermsOfServiceAgreementItem {
    /**
     * 약관동의 아이디
     * @type {string}
     * @memberof GetUserTermsOfServiceAgreementItem
     */
    'id': string;
    /**
     * 약관 아이디
     * @type {number}
     * @memberof GetUserTermsOfServiceAgreementItem
     */
    'termsOfServiceId': number;
    /**
     * 약관동의 해제일
     * @type {string}
     * @memberof GetUserTermsOfServiceAgreementItem
     */
    'deletedAt': string;
    /**
     * 약관동의일
     * @type {string}
     * @memberof GetUserTermsOfServiceAgreementItem
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface LoginUserByEmailRequest
 */
export interface LoginUserByEmailRequest {
    /**
     * 이메일
     * @type {string}
     * @memberof LoginUserByEmailRequest
     */
    'email': string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof LoginUserByEmailRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginUserByEmailResponse
 */
export interface LoginUserByEmailResponse {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof LoginUserByEmailResponse
     */
    'id': number;
    /**
     * 유저 이메일
     * @type {string}
     * @memberof LoginUserByEmailResponse
     */
    'email': string;
    /**
     * 유저 닉네임
     * @type {string}
     * @memberof LoginUserByEmailResponse
     */
    'nickName': string;
    /**
     * 유저 프로필 사진
     * @type {string}
     * @memberof LoginUserByEmailResponse
     */
    'profileImage': string;
    /**
     * 유저 삭제일
     * @type {string}
     * @memberof LoginUserByEmailResponse
     */
    'deletedAt': string;
    /**
     * 유저 마지막 업데이트일
     * @type {string}
     * @memberof LoginUserByEmailResponse
     */
    'updatedAt': string;
    /**
     * 유저 생성일
     * @type {string}
     * @memberof LoginUserByEmailResponse
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface ModifyFileRequest
 */
export interface ModifyFileRequest {
    /**
     * 고객 아이디
     * @type {number}
     * @memberof ModifyFileRequest
     */
    'userId'?: number;
    /**
     * 파일 유형 (프로필 이미지, 피드 이미지)
     * @type {string}
     * @memberof ModifyFileRequest
     */
    'contentType'?: ModifyFileRequestContentTypeEnum;
    /**
     * 연결된 콘텐츠 아이디
     * @type {string}
     * @memberof ModifyFileRequest
     */
    'contentId'?: string;
    /**
     * 원본 주소
     * @type {string}
     * @memberof ModifyFileRequest
     */
    'originalFileUrl'?: string;
    /**
     * 작은 섬네일 주소
     * @type {string}
     * @memberof ModifyFileRequest
     */
    'smallThumbnailUrl'?: string;
    /**
     * 중간 섬네일 주소
     * @type {string}
     * @memberof ModifyFileRequest
     */
    'mediumThumbnailUrl'?: string;
    /**
     * 큰 섬네일 주소
     * @type {string}
     * @memberof ModifyFileRequest
     */
    'largeThumbnailUrl'?: string;
    /**
     * 콘텐츠 관계 해제일
     * @type {string}
     * @memberof ModifyFileRequest
     */
    'disconnectedAt'?: string;
}

export const ModifyFileRequestContentTypeEnum = {
    FeedImage: 'FEED_IMAGE',
    ProfileImage: 'PROFILE_IMAGE'
} as const;

export type ModifyFileRequestContentTypeEnum = typeof ModifyFileRequestContentTypeEnum[keyof typeof ModifyFileRequestContentTypeEnum];

/**
 * 
 * @export
 * @interface ModifyFileResponse
 */
export interface ModifyFileResponse {
    /**
     * 파일 고유 아이디
     * @type {string}
     * @memberof ModifyFileResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ModifyUserCommandResult
 */
export interface ModifyUserCommandResult {
    /**
     * 
     * @type {number}
     * @memberof ModifyUserCommandResult
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface ModifyUserRequest
 */
export interface ModifyUserRequest {
    /**
     * 닉네임
     * @type {string}
     * @memberof ModifyUserRequest
     */
    'nickName'?: string;
    /**
     * 비밀번호
     * @type {string}
     * @memberof ModifyUserRequest
     */
    'password'?: string;
    /**
     * 프로필 이미지
     * @type {string}
     * @memberof ModifyUserRequest
     */
    'profileImage'?: string;
}
/**
 * 
 * @export
 * @interface SendVerificationRequest
 */
export interface SendVerificationRequest {
    /**
     * 인증 타입
     * @type {string}
     * @memberof SendVerificationRequest
     */
    'verificationType': SendVerificationRequestVerificationTypeEnum;
    /**
     * 이메일 주소 (인증타입이 이메일인경우 필수)
     * @type {string}
     * @memberof SendVerificationRequest
     */
    'emailAddress'?: string;
    /**
     * 요청 유저 아이디 (단순 기록용)
     * @type {number}
     * @memberof SendVerificationRequest
     */
    'userId'?: number;
}

export const SendVerificationRequestVerificationTypeEnum = {
    Email: 'EMAIL'
} as const;

export type SendVerificationRequestVerificationTypeEnum = typeof SendVerificationRequestVerificationTypeEnum[keyof typeof SendVerificationRequestVerificationTypeEnum];

/**
 * 
 * @export
 * @interface SendVerificationResponse
 */
export interface SendVerificationResponse {
    /**
     * 인증 요청 결과 아이디
     * @type {string}
     * @memberof SendVerificationResponse
     */
    'id': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 파일을 생성합니다.
         * @summary 파일 생성
         * @param {CreateFileRequest} createFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileStoreControllerCreateFile: async (createFileRequest: CreateFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createFileRequest' is not null or undefined
            assertParamExists('fileStoreControllerCreateFile', 'createFileRequest', createFileRequest)
            const localVarPath = `/file-store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 파일을 조회합니다.
         * @summary 파일 조회
         * @param {Array<string>} [id] 파일 고유 아이디
         * @param {Array<string>} [contentId] 연결된 콘텐츠 아이디
         * @param {number} [userId] 고객 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileStoreControllerGetFileList: async (id?: Array<string>, contentId?: Array<string>, userId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/file-store`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (contentId) {
                localVarQueryParameter['contentId'] = contentId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 파일을 수정합니다.
         * @summary 파일 수정
         * @param {string} fileId 
         * @param {ModifyFileRequest} modifyFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileStoreControllerModifyFile: async (fileId: string, modifyFileRequest: ModifyFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('fileStoreControllerModifyFile', 'fileId', fileId)
            // verify required parameter 'modifyFileRequest' is not null or undefined
            assertParamExists('fileStoreControllerModifyFile', 'modifyFileRequest', modifyFileRequest)
            const localVarPath = `/file-store/{fileId}`
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyFileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 약관을 동의합니다.
         * @summary 약관 동의
         * @param {AgreeTermsOfServiceRequest} agreeTermsOfServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfServiceControllerAgreeTermsOfService: async (agreeTermsOfServiceRequest: AgreeTermsOfServiceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'agreeTermsOfServiceRequest' is not null or undefined
            assertParamExists('termsOfServiceControllerAgreeTermsOfService', 'agreeTermsOfServiceRequest', agreeTermsOfServiceRequest)
            const localVarPath = `/terms-of-service/agree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(agreeTermsOfServiceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 약관 리스트를 가져옵니다.
         * @summary 약관 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfServiceControllerGetTermsOfServiceList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/terms-of-service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이메일 기반 회원을 생성합니다.
         * @summary 회원 생성
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser: async (createUserRequest: CreateUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserRequest' is not null or undefined
            assertParamExists('userControllerCreateUser', 'createUserRequest', createUserRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 회원의 정보를 조회합니다.
         * @summary 회원정보 & 약관동의정보 조회
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserInfo: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userControllerGetUserInfo', 'userId', userId)
            const localVarPath = `/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 이메일과 비밀번호로 로그인합니다.
         * @summary 이메일 로그인
         * @param {LoginUserByEmailRequest} loginUserByEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLoginByEmail: async (loginUserByEmailRequest: LoginUserByEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginUserByEmailRequest' is not null or undefined
            assertParamExists('userControllerLoginByEmail', 'loginUserByEmailRequest', loginUserByEmailRequest)
            const localVarPath = `/user/login-by-email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginUserByEmailRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *      회원의 정보를 수정합니다.     - 닉네임, 비밀번호, 프로필 이미지를 수정할 수 있습니다.     
         * @summary 회원정보 수정
         * @param {number} userId 
         * @param {ModifyUserRequest} modifyUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerModifyUser: async (userId: number, modifyUserRequest: ModifyUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userControllerModifyUser', 'userId', userId)
            // verify required parameter 'modifyUserRequest' is not null or undefined
            assertParamExists('userControllerModifyUser', 'modifyUserRequest', modifyUserRequest)
            const localVarPath = `/user/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 인증을 확인합니다.
         * @summary 인증 확인
         * @param {ConfirmVerificationRequest} confirmVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerConfirmVerification: async (confirmVerificationRequest: ConfirmVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'confirmVerificationRequest' is not null or undefined
            assertParamExists('verificationControllerConfirmVerification', 'confirmVerificationRequest', confirmVerificationRequest)
            const localVarPath = `/verification/confirm`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(confirmVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 인증을 요청합니다. 현재 이메일인증만 지원
         * @summary 인증 요청
         * @param {SendVerificationRequest} sendVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerSendVerification: async (sendVerificationRequest: SendVerificationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendVerificationRequest' is not null or undefined
            assertParamExists('verificationControllerSendVerification', 'sendVerificationRequest', sendVerificationRequest)
            const localVarPath = `/verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendVerificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 파일을 생성합니다.
         * @summary 파일 생성
         * @param {CreateFileRequest} createFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileStoreControllerCreateFile(createFileRequest: CreateFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileStoreControllerCreateFile(createFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 파일을 조회합니다.
         * @summary 파일 조회
         * @param {Array<string>} [id] 파일 고유 아이디
         * @param {Array<string>} [contentId] 연결된 콘텐츠 아이디
         * @param {number} [userId] 고객 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileStoreControllerGetFileList(id?: Array<string>, contentId?: Array<string>, userId?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFileListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileStoreControllerGetFileList(id, contentId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 파일을 수정합니다.
         * @summary 파일 수정
         * @param {string} fileId 
         * @param {ModifyFileRequest} modifyFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileStoreControllerModifyFile(fileId: string, modifyFileRequest: ModifyFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyFileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileStoreControllerModifyFile(fileId, modifyFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 약관을 동의합니다.
         * @summary 약관 동의
         * @param {AgreeTermsOfServiceRequest} agreeTermsOfServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async termsOfServiceControllerAgreeTermsOfService(agreeTermsOfServiceRequest: AgreeTermsOfServiceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.termsOfServiceControllerAgreeTermsOfService(agreeTermsOfServiceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 약관 리스트를 가져옵니다.
         * @summary 약관 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async termsOfServiceControllerGetTermsOfServiceList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTermsOfServiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.termsOfServiceControllerGetTermsOfServiceList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 이메일 기반 회원을 생성합니다.
         * @summary 회원 생성
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreateUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreateUser(createUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 회원의 정보를 조회합니다.
         * @summary 회원정보 & 약관동의정보 조회
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUserInfo(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUserInfo(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 이메일과 비밀번호로 로그인합니다.
         * @summary 이메일 로그인
         * @param {LoginUserByEmailRequest} loginUserByEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerLoginByEmail(loginUserByEmailRequest: LoginUserByEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginUserByEmailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerLoginByEmail(loginUserByEmailRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *      회원의 정보를 수정합니다.     - 닉네임, 비밀번호, 프로필 이미지를 수정할 수 있습니다.     
         * @summary 회원정보 수정
         * @param {number} userId 
         * @param {ModifyUserRequest} modifyUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerModifyUser(userId: number, modifyUserRequest: ModifyUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyUserCommandResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerModifyUser(userId, modifyUserRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 인증을 확인합니다.
         * @summary 인증 확인
         * @param {ConfirmVerificationRequest} confirmVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationControllerConfirmVerification(confirmVerificationRequest: ConfirmVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmVerificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationControllerConfirmVerification(confirmVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 인증을 요청합니다. 현재 이메일인증만 지원
         * @summary 인증 요청
         * @param {SendVerificationRequest} sendVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verificationControllerSendVerification(sendVerificationRequest: SendVerificationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SendVerificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verificationControllerSendVerification(sendVerificationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 파일을 생성합니다.
         * @summary 파일 생성
         * @param {CreateFileRequest} createFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileStoreControllerCreateFile(createFileRequest: CreateFileRequest, options?: any): AxiosPromise<CreateFileResponse> {
            return localVarFp.fileStoreControllerCreateFile(createFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 파일을 조회합니다.
         * @summary 파일 조회
         * @param {Array<string>} [id] 파일 고유 아이디
         * @param {Array<string>} [contentId] 연결된 콘텐츠 아이디
         * @param {number} [userId] 고객 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileStoreControllerGetFileList(id?: Array<string>, contentId?: Array<string>, userId?: number, options?: any): AxiosPromise<GetFileListResponse> {
            return localVarFp.fileStoreControllerGetFileList(id, contentId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 파일을 수정합니다.
         * @summary 파일 수정
         * @param {string} fileId 
         * @param {ModifyFileRequest} modifyFileRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileStoreControllerModifyFile(fileId: string, modifyFileRequest: ModifyFileRequest, options?: any): AxiosPromise<ModifyFileResponse> {
            return localVarFp.fileStoreControllerModifyFile(fileId, modifyFileRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 약관을 동의합니다.
         * @summary 약관 동의
         * @param {AgreeTermsOfServiceRequest} agreeTermsOfServiceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfServiceControllerAgreeTermsOfService(agreeTermsOfServiceRequest: AgreeTermsOfServiceRequest, options?: any): AxiosPromise<void> {
            return localVarFp.termsOfServiceControllerAgreeTermsOfService(agreeTermsOfServiceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 약관 리스트를 가져옵니다.
         * @summary 약관 리스트
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        termsOfServiceControllerGetTermsOfServiceList(options?: any): AxiosPromise<GetTermsOfServiceResponse> {
            return localVarFp.termsOfServiceControllerGetTermsOfServiceList(options).then((request) => request(axios, basePath));
        },
        /**
         * 이메일 기반 회원을 생성합니다.
         * @summary 회원 생성
         * @param {CreateUserRequest} createUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser(createUserRequest: CreateUserRequest, options?: any): AxiosPromise<CreateUserResponse> {
            return localVarFp.userControllerCreateUser(createUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 회원의 정보를 조회합니다.
         * @summary 회원정보 & 약관동의정보 조회
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserInfo(userId: number, options?: any): AxiosPromise<GetUserResponse> {
            return localVarFp.userControllerGetUserInfo(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 이메일과 비밀번호로 로그인합니다.
         * @summary 이메일 로그인
         * @param {LoginUserByEmailRequest} loginUserByEmailRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLoginByEmail(loginUserByEmailRequest: LoginUserByEmailRequest, options?: any): AxiosPromise<LoginUserByEmailResponse> {
            return localVarFp.userControllerLoginByEmail(loginUserByEmailRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *      회원의 정보를 수정합니다.     - 닉네임, 비밀번호, 프로필 이미지를 수정할 수 있습니다.     
         * @summary 회원정보 수정
         * @param {number} userId 
         * @param {ModifyUserRequest} modifyUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerModifyUser(userId: number, modifyUserRequest: ModifyUserRequest, options?: any): AxiosPromise<ModifyUserCommandResult> {
            return localVarFp.userControllerModifyUser(userId, modifyUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 인증을 확인합니다.
         * @summary 인증 확인
         * @param {ConfirmVerificationRequest} confirmVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerConfirmVerification(confirmVerificationRequest: ConfirmVerificationRequest, options?: any): AxiosPromise<ConfirmVerificationResponse> {
            return localVarFp.verificationControllerConfirmVerification(confirmVerificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 인증을 요청합니다. 현재 이메일인증만 지원
         * @summary 인증 요청
         * @param {SendVerificationRequest} sendVerificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verificationControllerSendVerification(sendVerificationRequest: SendVerificationRequest, options?: any): AxiosPromise<SendVerificationResponse> {
            return localVarFp.verificationControllerSendVerification(sendVerificationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 파일을 생성합니다.
     * @summary 파일 생성
     * @param {CreateFileRequest} createFileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fileStoreControllerCreateFile(createFileRequest: CreateFileRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fileStoreControllerCreateFile(createFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 파일을 조회합니다.
     * @summary 파일 조회
     * @param {Array<string>} [id] 파일 고유 아이디
     * @param {Array<string>} [contentId] 연결된 콘텐츠 아이디
     * @param {number} [userId] 고객 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fileStoreControllerGetFileList(id?: Array<string>, contentId?: Array<string>, userId?: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fileStoreControllerGetFileList(id, contentId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 파일을 수정합니다.
     * @summary 파일 수정
     * @param {string} fileId 
     * @param {ModifyFileRequest} modifyFileRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public fileStoreControllerModifyFile(fileId: string, modifyFileRequest: ModifyFileRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).fileStoreControllerModifyFile(fileId, modifyFileRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 약관을 동의합니다.
     * @summary 약관 동의
     * @param {AgreeTermsOfServiceRequest} agreeTermsOfServiceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public termsOfServiceControllerAgreeTermsOfService(agreeTermsOfServiceRequest: AgreeTermsOfServiceRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).termsOfServiceControllerAgreeTermsOfService(agreeTermsOfServiceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 약관 리스트를 가져옵니다.
     * @summary 약관 리스트
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public termsOfServiceControllerGetTermsOfServiceList(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).termsOfServiceControllerGetTermsOfServiceList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이메일 기반 회원을 생성합니다.
     * @summary 회원 생성
     * @param {CreateUserRequest} createUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userControllerCreateUser(createUserRequest: CreateUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userControllerCreateUser(createUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 회원의 정보를 조회합니다.
     * @summary 회원정보 & 약관동의정보 조회
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userControllerGetUserInfo(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userControllerGetUserInfo(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 이메일과 비밀번호로 로그인합니다.
     * @summary 이메일 로그인
     * @param {LoginUserByEmailRequest} loginUserByEmailRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userControllerLoginByEmail(loginUserByEmailRequest: LoginUserByEmailRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userControllerLoginByEmail(loginUserByEmailRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *      회원의 정보를 수정합니다.     - 닉네임, 비밀번호, 프로필 이미지를 수정할 수 있습니다.     
     * @summary 회원정보 수정
     * @param {number} userId 
     * @param {ModifyUserRequest} modifyUserRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public userControllerModifyUser(userId: number, modifyUserRequest: ModifyUserRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).userControllerModifyUser(userId, modifyUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 인증을 확인합니다.
     * @summary 인증 확인
     * @param {ConfirmVerificationRequest} confirmVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verificationControllerConfirmVerification(confirmVerificationRequest: ConfirmVerificationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verificationControllerConfirmVerification(confirmVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 인증을 요청합니다. 현재 이메일인증만 지원
     * @summary 인증 요청
     * @param {SendVerificationRequest} sendVerificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verificationControllerSendVerification(sendVerificationRequest: SendVerificationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verificationControllerSendVerification(sendVerificationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



